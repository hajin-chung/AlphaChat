# Alpha Chat GUI client

기분조타실 제작

## 구현

request-response 패턴으로 개발하였다.
클라이언트가 req(request) 를 보내면 매니저가 받아 처리(execute) 를 하고 결과(response)를 보내주는 방식이다.
req에는 여러가지 종류가 있다. 방생성(room create), 방삭제(room delete), 사용자 추가(register), 등이 있다.
각각의 req를 클라이언트가 접속된 tcp 소켓으로 받아 그 소켓으로 처리된 결과를 보내준다.

## 사용법

$ ./build.run.sh

또는

$ gcc ./src/*.c ./src/*.h -o ./build/ac
$ ./build/ac 239.0.140.1 5000


### 명령어

프로그램 내에서 여러가지 명령어를 수행할 수 있다.

- /help : Help page 출력                                                                
- /create [RoomName] : 방 생성, 방 이름 설정                           
- /delete [RoomID] : 방 삭제
- /coonect [RoomID] : 방에 연결(방의 채팅 내역 최근 5개를 가져옴)
- /invite [ID] [RoomID] : 방에 다른 상요자를 추가
- /ul : 다른 사용자의 정보를 출력                                                      
- /rl : 자신이 속해 있는 방의 목록을 출력

## 파일 구조

- build/ : ./build.run.sh 를 실행 시켰을 때 컴파일 된 프로그램이 있는 디렉토리
    - ac : 소스코드가 컴파일된 결과물 (alpha chat manager)
- src/   : 소스코드가 있는 디렉토리
    - main.[c, h] : 명령어 처리, 매니저로부터 받은 결과 값 처리 등을 한다.
    - print.[c, h] : gui 관련
    - utils.[c, h] : 도움을 주는 여러 함수들
    - const.h : 클라이언트 설정값들
- build.run.sh, build.sh

## 자랑거리들

1. buftodata(int n, char* buf, ...)
    AlphaChat 특성상 req의 종류가 많다 보니 모든 req에 대한 개별적인 함수들을 만드는 것이
    비효율적이라고 생각. 따라서 입력을 받은 buf에서 동적으로 데이터를 파싱 해줄 수 있는 함수를 만들었다.
    이 함수를 많은 경우에서 사용하기 위해 받을 수 있는 인자의 수는 정해져 있지 않고, <stdarg.h>를 이용하여 처리 하였다.
    사용 예시는 다음과 같다.
    ex) buftodata(3, buf,
        INT, &code, 0, 4,
        INT, &room_id, 4, 4,
        INT, &user_id, 8, 4);
    인자 구조는 (받아올 데이터의 갯수, buf 배열, 
        [
            TYPE : 데이터 종류,
            void* pt : 데이터를 저장할 곳을 가르키는 포인터
            int start: buf배열에서 데이터의 시작 지점.
            int size : 데이터의 길이
        ] 
    )

2. datatobuf(int n, char* buf, ...)
    데이터를 하나의 buf로 묶는 함수. 인자 구조는 buftodata() 와 완벽히 동일.

3. struct printableBox
    gui를 만들기 위해서는 터미널에서 원하는 위치에 원하는 크기의 직사각형을 설정하고 그 속에만 문자를 출력하는 기능이 필요하다.
    더 쉽게 말하면 터미널 속에서 터미널을 만들어야 하는데 그 기능을 이 구조체가 수행한다.
    이 구조체로 그 직사각형을 설정하고 printfBox나 printToBox로 그 직사각형로 문자를 출력이 가능하다.
    이거 구현하는게 생각보다 어려웠당...

## 마치면서

사실 설계단계 때 파일 주고 받기도 고안을 했었지만 코드를 쓰면서 어려움을 느꼈다.
파일 주고받을때 우선 사용자로 부터 파일에 대한 메타 데이터(파일의 제목, 파일 용량 등등) 을 하나의 req로 받고
추후에 다른 종류의 req로 파일의 내용을 받아 서버에 저장후 다른 사용자가 다운 받고 싶다는 req를 날리면 그때
파일의 내용을 보내주는 형식으로 고안을 했었고 파일의 메타 데이터를 받는 req까지는 구현을 했다. 하지만 그 후 처리가
점점 복잡해지는 것 같아 과감히 그만 두었다.