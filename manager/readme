# Alpha Chat Manager

기분조타실 제작

## 구현

request-response 패턴으로 개발하였다.
클라이언트가 req(request) 를 보내면 매니저가 받아 처리(execute) 를 하고 결과(response)를 보내주는 방식이다.
req에는 여러가지 종류가 있다. 방생성(room create), 방삭제(room delete), 사용자 추가(register), 등이 있다.
각각의 req를 클라이언트가 접속된 tcp 소켓으로 받아 그 소켓으로 처리된 결과를 보내준다.

## 사용법

$ ./build.run.sh

./build.run.sh : /src 에 있는 모든 소스코드를 컴파일하고 실행한다.
./build.sh     : /src 에 있는 모든 소스코드를 컴파일 한다.


### 명령어

프로그램 내에서 여러가지 명령어를 수행할 수 있다.

- /help   help 를 출력한다
- /server 서버의 정보를 출력한다. (멀티캐스트 주소, tcp서버 주소)
- /rooms  방들의 정보를 출력한다
- /users  사용자들의 정보를 출력한다
- /hb     클라이언트들이 보낸 하트비트에 대한 정보를 실시간으로 출력한다. (끄고 킬 수 있음 toggle)
- /mcast  멀티캐스트로 서버의 정보가 전송되는 것을 실시간으로 출력한다. (끄고 킬 수 있음 toggle)


## 파일 구조

- build/ : ./build.run.sh 나 ./build.sh 를 실행 시켰을 때 컴파일 된 프로그램이 있는 디렉토리
    - ac : 소스코드가 컴파일된 결과물 (alpha chat manager)
- src/   : 소스코드가 있는 디렉토리
    - main.[c, h] : 소켓초기화, 새로운 사용자 등 모든 처리를 관리
    - req.[c, h]  : 클라이언트로 부터 들어온 명령을 처리한다.
    - res.[c, h]  : 클라이언트들로 부터온 명령을 처리한 결과값을 반환한다.
    - cmd.[c, h]  : 서버 관리자의 명령들을 처리 한다. (stdin 으로 받은 명령들)
    - room.[c, h] : 방 생성, 방 삭제 등을 처리한다.
    - user.[c, h] : 사용자 추가, 사용자 삭제 등을 처리한다.
    - utils.[c, h]: datatobuffer() 와 같은 도움을 주는 함수들이 있다.
    - const.h     : 서버 주소, 멀티캐스트 주소 같은 설정 값들이 있다.
- build.run.sh, build.sh

## 마치면서

사실 설계단계 때 파일 주고 받기도 고안을 했었지만 코드를 쓰면서 어려움을 느꼈다.
파일 주고받을때 우선 사용자로 부터 파일에 대한 메타 데이터(파일의 제목, 파일 용량 등등) 을 하나의 req로 받고
추후에 다른 종류의 req로 파일의 내용을 받아 서버에 저장후 다른 사용자가 다운 받고 싶다는 req를 날리면 그때
파일의 내용을 보내주는 형식으로 고안을 했었고 파일의 메타 데이터를 받는 req까지는 구현을 했다. 하지만 그 후 처리가
점점 복잡해지는 것 같아 과감히 그만 두었다.